"1. Cyclically rotate an array n number of times
Time Complexity can be O(n2)

A[] = {1, 2, 3, 4, 5}
N = 1

Output; 5 1 2 3 4


A[] = {1, 2, 3, 4, 5}
N = 2

Output;  4 5 1 2 3 


A[] = {1, 2, 3, 4, 5}
N = 3

Output: 3 4 5 1 2

----->>>> 
package Apr12;

import java.util.*;
import java.util.Arrays;

public class RotateArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
                 	Scanner sc=new Scanner(System.in);

		int[] arr = { 1, 2, 3, 4, 5 };

	     System.out.println("Enter N value");
		int n = sc.nextInt();
		rotate(arr, n);

	}

	private static void rotate(int[] arr, int n) {
		// TODO Auto-generated method stub

		int[] temp = new int[n];
		for (int i = 0; i < n; i++) {
			temp[i] = arr[arr.length - 1 - i];
		}

		int[] b = new int[arr.length];
		int k = n - 1;
		for (int i = n - 1; i < arr.length - 1; i++) {
			b[i + 1] = arr[i -k];
			
		}
		for (int i = 0; i < n; i++) {
			b[i] = temp[temp.length-1-i];
		}

		System.out.print(Arrays.toString(b));

	}

}







2. Search Insert Position 

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [1,3,5,6], target = 5
Output: 2


Input: nums = [1,3,5,6], target = 2
Output: 1

Input: nums = [1,3,5,6], target = 7
Output: 4

https://leetcode.com/problems/search-insert-position/description/"

---->>   class Solution {
    public int searchInsert(int[] nums, int target) {
        
        int start=0;
        int end=nums.length-1;
        
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            
            if(nums[mid]==target )
            {
                return mid;
            }
            else if(target<nums[mid])
                end=mid-1;
            
            else 
                start=mid+1;
            
        }
        return -1;
    }
}

